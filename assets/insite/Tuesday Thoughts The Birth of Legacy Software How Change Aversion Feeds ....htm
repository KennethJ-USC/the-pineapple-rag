
<p>The Birth of Legacy Software:<br>
How Change Aversion Feeds on Itself</p>

<p>by Rajiv Prabhakar</p>

<p> </p>

<p><strong>Introduction:</strong></p>

<blockquote>"And so the team resolves to follow the path of least resistance. They dutifully update the unit tests. They also manually test the relevant changes, because they have learnt from experience that unit tests are only half the story. The code is successfully deployed without problems, everyone breathes a sigh of relief, and congratulate themselves on a job well done."</blockquote>

<p>In this post from his blog "Software the Hard way - Thoughts on Software Development," Rajiv describes the birth of legacy software. Or put another way: how software becomes <em>legacy software</em> despite the support of a well-intentioned, risk-averse development team.</p>

<p>Rajiv argues that an aversion to change - given sufficient time - can cause a team to make decisions based on reducing the problem space, reducing risk. After all, they can't fully trust a system that nobody fully understands. Not anymore, at least.</p>

<blockquote>They identify a way to avoid making significant changes. <em>“Right here, in method Foo in class Bar, just add another if-check, a service call and/or a dependency to class Baz.”</em> This way, the changes will be only a couple lines of code. Far less risky.</blockquote>

<hr>
<p> </p>

<p><strong>Editor's Commentary:</strong></p>

<p>Please read this article, and think how it may apply to the digital systems you use in your work. It can be so easy to explain away Hard Problems as the result of incompetence, bygone leadership, or entropy. These are great targets to blame. <strong>By blaming incompetence, we know that we will never be responsible for creating legacy software, so long as we can avoid being incompetent.</strong></p>

<p>And that is actually a pretty tidy problem to solve! In fact, Hard Problems do not have easy solutions. I do not wish to exonerate incompetence, but to highlight an uncomfortable reality: it is wrong to expect that we can find an easy, workable solution to every hard problem - <em>despite</em> our technical competence, motivation, or good intentions. <strong>Sometimes, the only way to move forward is to address the complexity in our work.</strong></p>

<hr>
<p><strong>Question: </strong><em>Have you ever worked with legacy software? Why do you think it's such a difficult problem?</em></p>

<hr>
<p><em>Original post: <a href="https://software.rajivprab.com/2019/11/25/the-birth-of-legacy-software-how-change-aversion-feeds-on-itself/">https://software.rajivprab.com/2019/11/25/the-birth-of-legacy-software-how-change-aversion-feeds-on-itself/</a></em></p>

<p><em>More valuable discussion about this article: <a href="https://news.ycombinator.com/item?id=21632338">https://news.ycombinator.com/item?id=21632338</a></em></p>
<p></p>	
									